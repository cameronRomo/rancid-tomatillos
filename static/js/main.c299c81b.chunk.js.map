{"version":3,"sources":["apiCalls.js","Poster.js","Movies.js","Movie-form.js","App.js","reportWebVitals.js","index.js"],"names":["movieDetailsById","id","fetch","then","response","json","Poster","image","isSinglePoster","useState","selectedMovie","setSelectedMovie","useEffect","Object","keys","length","getSelectedMovie","a","movieDetails","className","to","alt","src","window","scrollTo","currentMovie","movie","Fragment","title","average_rating","toFixed","release_date","overview","genres","map","genre","i","runtime","setMovieInfo","Movies","movies","syncMovieId","moviePosters","poster_path","aria-label","data-testid","MovieForm","props","handleInput","event","setState","target","name","value","filterMovies","preventDefault","filteredMovies","filter","toUpperCase","state","getFilteredMovies","clearInputs","unMatchedResult","type","placeholder","this","onChange","onClick","Component","App","componentDidMount","catch","error","console","log","singleMovieFetch","moviesToFilter","exact","path","render","findPoster","match","parseInt","params","poster","movieId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","router","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c299c81b.chunk.js","sourcesContent":["const movieData = () => {\n  return fetch('https://rancid-tomatillos.herokuapp.com/api/v2/movies')\n  .then(response => response.json())\n}\n\nconst movieDetailsById = (id) => {\n  return fetch(`https://rancid-tomatillos.herokuapp.com/api/v2/movies/${id}`)\n  .then(response => response.json())\n}\n\nexport { movieData, movieDetailsById };","import React, { useState, useEffect } from 'react';\nimport './Poster.css';\nimport { movieDetailsById } from './apiCalls.js';\nimport { Link } from 'react-router-dom';\n\nconst Poster = ({ image, id, isSinglePoster }) => {\n    // Updateing app state here causes an infinite re-render\n    // EXPERIMENTAL HOOKS (Allows us to use some state in our functional component) 👇\n    //   * Otherwise we would want to use a class component\n    // --------------------------------------------------------------------------------\n    const [selectedMovie, setSelectedMovie] = useState({})\n    // piece of state, and method to set state (useState, initial value of our state)\n    // useEffect runs and allows us to get our state\n    useEffect(() => {\n        if (!Object.keys(selectedMovie).length) {\n            getSelectedMovie();\n        }\n    })\n    // function we used to use our API call (Customized by us... not imported from react)\n    const getSelectedMovie = async () => {\n        const movieDetails = await movieDetailsById(id);\n        setSelectedMovie(movieDetails)\n    }\n    // ----------------------------------------------------------------------------------\n    \n    const setMovieInfo = () => {\n        window.scrollTo(0, 0);\n        const currentMovie = selectedMovie.movie;\n        \n        return(\n            <section className='movie-info movie-info-background'>\n                { (currentMovie &&  Object.keys(currentMovie).length) && \n                    <React.Fragment>\n                        <p>{ currentMovie.title }</p>\n                        <p>Average Rating: { currentMovie.average_rating.toFixed(1) }</p>\n                        <p>Release Date: { currentMovie.release_date }</p>\n                        <p>Overview: { currentMovie.overview }</p>\n                        <p>Genre(s): { currentMovie.genres.map((genre, i) => {\n                            const genreLenth = currentMovie.genres.length\n                            if (genreLenth === i + 1) {\n                                return `and ${genre}`\n                            } else {\n                                return `${genre}, `\n                            }\n                        })\n                        }</p>\n                        <p>Runtime: { currentMovie.runtime } minutes</p>\n                        <Link to='/'>\n                            <button className='go-back-btn' to='/'>Go Back</button>\n                        </Link>    \n                    </React.Fragment>\n                }\n            </section>\n        )\n    }\n\n    return (\n        <article className='movie-info'>\n            <Link to={ `/${id}` }>\n                <img \n                    alt='movie poster' \n                    className={ isSinglePoster === true ? 'locked-poster' : 'poster' } \n                    src={ image }\n                />\n            </Link>\n            { isSinglePoster === true && setMovieInfo() }\n        </article>\n    )\n}\n\nexport { Poster };","import React from 'react';\nimport { Poster } from './Poster';\nimport './Movies.css';\n\nconst Movies = ({ movies, isSinglePoster, selectedMovie, syncMovieId }) => {\n    const moviePosters = movies.map(movie => {\n        return (\n            <Poster\n                image={ movie.poster_path }\n                aria-label='movie'\n                id={ movie.id }\n                key={ movie.id }\n                isSinglePoster={ isSinglePoster }\n                selectedMovie={ selectedMovie }\n                syncMovieId={ syncMovieId }\n            />\n        )\n    })\n\n    return (\n        <section>\n            <h2 className='movies-section-title'>\n                Movies\n            </h2>\n            <article data-testid='movies-container' className={movies.length === 1 ? 'single-poster' : 'movie-posters-container'}>\n                {moviePosters}\n            </article>\n        </section>\n    )\n}\n\nexport { Movies };","import React, { Component } from 'react';\nimport './Movie-form.css'\n\nclass MovieForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      unMatchedResult: false\n    }\n  }\n\n  handleInput = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n  \n  filterMovies = (event) => {\n    event.preventDefault();\n    const filteredMovies = this.props.movies.filter(movie => movie.title.toUpperCase() === this.state.title.toUpperCase());\n    // this.props.getFilteredMovies(filteredMovies)\n    // this.clearInputs();\n    if (filteredMovies.length > 0) {\n      this.props.getFilteredMovies(filteredMovies)\n      this.clearInputs();\n      this.setState({ unMatchedResult: false })\n    } else {\n      this.setState({ unMatchedResult: true });\n    }\n  }\n\n  clearInputs = () => {\n    this.setState({ title: '' })\n  }\n\n  render() {\n    return(\n      <section className='searched-movies-container'>\n        <form className='search-form'>\n          <input className='title-search-bar'\n            type='text'\n            placeholder='Movie'\n            name='title'\n            value={ this.state.title }\n            onChange={ event => this.handleInput(event) }\n          />\n\n          <button className='title-search-button' onClick={ event => this.filterMovies(event) }>\n            SEARCH 🔍\n          </button>\n        </form>\n        { this.state.unMatchedResult === true && <p className='error-message'>Sorry, no title matches your search. Try searching for another movie.</p> }\n      </section>\n    )\n  }\n}\n\nexport { MovieForm };","import React, { Component } from 'react';\nimport { movieData, movieDetailsById } from './apiCalls.js';\nimport { Movies } from './Movies.js';\nimport './App.css';\nimport { Route, Switch, Link } from 'react-router-dom';\nimport { MovieForm } from './Movie-form.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      selectedMovie: {},\n      isSinglePoster: false,\n    }\n  }\n\n  componentDidMount = async () => {\n    await movieData()\n    .then(movies => this.setState({ movies: movies.movies }))\n    .catch(error => console.log(error))\n  }\n\n  singleMovieFetch = async (id) => {\n    const movieDetails = await movieDetailsById(id);\n    this.setState({\n      selectedMovie: movieDetails,\n    })\n  }\n\n  getFilteredMovies = (moviesToFilter) => {\n    this.setState({ movies: moviesToFilter });\n  }\n\n  render() {\n    return (\n      <section>\n        <h1 className='page-title'>Rancid Tomatillos</h1>\n        <Switch>\n          <Route \n            exact \n            path='/' \n            render={ () => { \n              return (\n              <section>\n                <MovieForm \n                  movies={ this.state.movies }\n                  getFilteredMovies={ this.getFilteredMovies }  \n                />\n                <Movies \n                  movies={ this.state.movies } \n                  findPoster={ this.findPoster } \n                  isSinglePoster={ this.state.isSinglePoster }/> \n              </section>\n              )\n            }\n          }\n          />\n          <Route \n            exact\n            path='/:id'\n            render={({ match }) => {\n              const id = parseInt(match.params.id);\n              const poster = this.state.movies.filter(movie => movie.id === parseInt(match.params.id));\n              if (poster.length > 0) {\n                return <Movies\n                  movies={ poster } \n                  isSinglePoster={ true } \n                  movieId={ id }\n                  selectedMovie={ this.state.selectedMovie }\n                  syncMovieId={ this.singleMovieFetch }\n                />\n              } else {\n                return (\n                <article>\n                  <p>Sorry, no poster found with that id!</p>\n                  <Link to='/'>\n                    <button \n                      className='go-back-btn' \n                      to='/'\n                    >Go Back\n                    </button>\n                  </Link>\n                </article>\n                )\n              }\n            }}\n          />\n          </Switch>\n      </section>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst router = <BrowserRouter> <App /> </BrowserRouter>;\n\nReactDOM.render(\n  router,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}